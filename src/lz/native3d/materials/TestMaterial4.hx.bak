package lz.native3d.materials 
{
	import flash.display3D.Context3D;
	import flash.display3D.Context3DBlendFactor;
	import flash.display3D.Context3DProgramType;
	import flash.display3D.Program3D;
	import flash.display3D.textures.TextureBase;
	import lz.native3d.core.BasicPass3D;
	import lz.native3d.core.Instance3D;
	import lz.native3d.core.Node3D;
	import lz.native3d.core.VertexBufferSet;
	import lz.native3d.ns.native3d;
	/**
	 * ...
	 * @author lizhi http://game-develop.net/
	 */
	use namespace native3d;
	class TestMaterial4 extends MaterialBase
	{
		public var p:Program3D;
		private var v:Vector<Float>;
		private var texture:TextureBase;
		public function TestMaterial4(texture:TextureBase) 
		{
			this.texture = texture;
			var vc:String = "m44 vt0,va0,vc0\n" +
							"m44 op,vt0,vc4\n" +
							"mov v0,va1\n"+
							"";
			var fc:String = "tex oc,v0,fs0 <linear,nomip,2d>\n" +
							"";
			p = createProgram(vc, fc);
		}
		override public function draw(node:Node3D, pass:BasicPass3D):Void {
			var c3d:Context3D = Instance3D.instance.c3d;
			c3d.setBlendFactors(sourceFactor, destinationFactor);
			c3d.setProgram(p);
			var xyz:VertexBufferSet = node.drawAble.xyz;
			c3d.setVertexBufferAt(0, xyz.vertexBuff, 0, xyz.format);
			var uv:VertexBufferSet = node.drawAble.uv;
			c3d.setVertexBufferAt(1, uv.vertexBuff, 0, uv.format);
			c3d.setTextureAt(0, texture);
			c3d.setProgramConstantsFromMatrix(Context3DProgramType.VERTEX, 0, node.worldMatrix, true);
			c3d.setProgramConstantsFromMatrix(Context3DProgramType.VERTEX, 4, pass.camera.perspectiveProjectionMatirx, true);
			c3d.setProgramConstantsFromVector(Context3DProgramType.FRAGMENT, 0, fragment);
			c3d.drawTriangles(node.drawAble.indexBufferSet.indexBuff);
			c3d.setVertexBufferAt(0,null, 0, xyz.format);
			c3d.setVertexBufferAt(1, null, 0, uv.format);
			c3d.setTextureAt(0, null);
			
			c3d.setBlendFactors(Context3DBlendFactor.ONE, Context3DBlendFactor.ZERO);
		}
		override public function init(node:Node3D):Void {
			node.drawAble.xyz.init();
			node.drawAble.uv.init();
			node.drawAble.indexBufferSet.init();
			vertex = new Vector<Float>(32);
			fragment = Vector<Float>([Math.random(), Math.random(), Math.random(), Math.random()]);
			
		}
	}

}